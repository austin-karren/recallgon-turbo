import { useRef, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { SignInButton, useUser } from "@clerk/nextjs";
import { ErrorPage, LoadingPage, Spin } from "components/loading";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

import { api, type RouterOutputs } from "~/utils/api";
import { toast } from "react-hot-toast";

dayjs.extend(relativeTime);

const PostWizard: React.FC = () => {
  const { user } = useUser();
  const postRef = useRef<HTMLInputElement>(null);
  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate: createPost, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      if (postRef?.current) postRef.current.value = "";
      setInput("");
      void ctx.post.getAll.invalidate(); // void to ignore promise
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Failed to post! Please try again later.");
      }
    }
  });

  console.log("userId", user?.id);

  if (!user) {
    return null;
  }

  return (
    <div className="flex gap-3 w-full">
      <Image
        src={user?.profileImageUrl || "/user-circle.png"}
        alt="Profile image"
        className="rounded-full"
        width={44}
        height={44}
      />
      <input
        placeholder="‚ú® Type your favorite emojis"
        className="bg-transparent grow outline-none text-xl"
        ref={postRef}
        disabled={isPosting}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            if (postRef?.current) createPost({
              content: postRef.current.value,
            });
          }
        }}
        onChange={(e) => {
          setInput(e.currentTarget.value);
        }}
      />
      {input !== "" && !isPosting && (<button
        onClick={() => {
          if (postRef?.current) createPost({
            content: postRef.current.value,
          });
        }}
      >
        post
      </button>)}
      {isPosting && (
        <div className="flex items-center">
          <Spin size={24} />
        </div>
      )}
    </div>
  );
};

type PostWithUser = RouterOutputs["post"]["getAll"][number];

const PostView = ({ post, author }: PostWithUser) => {
  return (
    <div
      key={post.id}
      className="p-4 border-b border-gray-500 flex items-center"
    >
      <div className="h-11 w-11">
        <Image
          src={author?.profileImageUrl || "/user-circle.png"}
          width={44}
          height={44}
          alt="Author image"
          className="rounded-full"
        />
      </div>
      <div className="px-4 flex flex-col">
        <div className="fle gap-1">
          <span className="font-normal text-gray-200">{`@${author?.username}`}</span>{" "}
          {" ¬∑ "}
          <span className="font-normal text-gray-400">{`${dayjs(
            post?.createdAt,
          ).fromNow()}`}</span>
        </div>
        <p className="text-2xl">{post.content}</p>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data: posts, isLoading: postsLoading } = api.post.getAll.useQuery();

  if (postsLoading) {
    return <LoadingPage />;
  }

  if (!posts) {
    return <ErrorPage />;
  }

  return (
    <div className="flex flex-col">
      {posts.map((fullPost) => (
        <PostView {...fullPost} key={fullPost?.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  // start fetching posts asap before first render
  api.post.getAll.useQuery();

  // Return empty div if user is not loaded
  if (!userLoaded) {
    return <div />;
  }

  return (
    <>
      <Head>
        <title>Twimoji üê•</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-[100dvh]">
        <div className="container w-full border-gray-500 md:border-x md:max-w-2xl">
          <div className="border-b border-gray-500 p-4 flex">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {!!isSignedIn && (
              <div className="flex justify-center grow">
                <PostWizard />
              </div>
            )}
          </div>
          <Feed />
          {/* <CreatePostForm /> */}
        </div>
      </main>
    </>
  );
};

export default Home;
